#+title: backlog

* Note
This project has been moved over from 8.x as I thought was required.
The backlog contains a lot of the steps taken but not all and should not be interpreted as being all the work done.

* Task Guideline
#+begin_src org
Content
For this project you will have to build a website using Laravel. To clarify: we are talking about a dynamic website, so one that will store and read data dynamically from a database to persistently save information. A static page will not suffice!

It is not allowed to just copy/paste an online tutorial to finish this project, but you are allowed to use them as a basis for your own website if you:
- understand the code you are using and can explain what it does in your own words
- you correctly cite your sources

You are free to choose the type of website that you build, for example for the small business of your parents, a local sports club, music festival, video game, ... As long as the website meets the standards described in this assignment.

Functional minimum requirements
As the name indicates, these requirements are the minimum features that need to be present in your website.

You have an informative website with at least the following data driven features:

Login system
Users can log in
Visitors can create a new account
Users may or may not be an administrator
Only an administrator can promote another user to administrator status (or create a new user that is an admin)
-----

Profile pagina
Each user has their own publicly available profile page
A user can edit their own user data
The information shown is at least
Username
Birthday
Avatar (that can be uploaded and saved on the webserver)
Short 'about me' biography
-----

Latest news
Admins can add, edit, and delete news items
Every visitor of the website can view the news posts
These news items have at least the following:
Title
Cover image
Content
Publishing date
-----

FAQ page
There is a list of questions and answers, grouped by categories
Admins can add, edit, and delete FAQ categories
Admins can add, edit, and delete FAQ question and answer pairs
Every visitor of the website can view the FAQ page(s)
-----

Contact page
Visitors can fill out a contact form
The content of submitted forms will be sent to the administrators

-----
Extra requirements
If you perfectly implement every single minimal requirement you will get a passing grade for the project. If you wish to excel in your result, you can add extra features to your website. Below you can find a list of example features you can add:

Admins can reply to the submitted contact forms through the admin panel, the replies will be mailed to the original sender
Users can leave comments on news posts
Users can pose questions that might be added to the FAQ
Admins can add answers to the posed FAQ questions through the admin panel
Basic forum: Users can create threads, other users can leave replies
Online ordering: A customer can (with or without being logged in) place an order for the products available on the website
...
Don't just add features for the sake of adding features. If you are making a website for your parents' butcher shop it's a lot more logical to add online ordering than it is to add a forum. If you're unsure about how good a feature might be, feel free to ask the teacher.

Technical requirements
Aside from the functional requirements, there are a few guidelines for the technical aspect of the project as well:

Views
You will at least have an "about" page. This is a static view that will serve as your Readme/list of sources. Cite any resources that you've used in this page, as well as a link to those pages. This page is mandatory, if your about page does not exist, you will not be able to pass for this project.
Use at least 2 layouts (think about maybe splitting up the 'public' website and the admin panel)
Use partials where logical
Use the techniques we've seen during the exercises:
Control structures
XSS protection
CSRF protection
Client-side validation
Routes
All routes use controller methods
All routes use logical middleware
If possible, group the routes where needed
Controller
Use several controllers to split your logic
Think back to resource controllers for CRUD operations
Models
Use Eloquent models
Add relationships where needed
At least 1 one-to-many
At least 1 many-to-many
Database
Your database needs to be created using migration files
Add seeders to have some "dummy" data
I will run "php artisan migrate:fresh --seed" on every project. After running this your website should be usable for me
Authentication
Default functionality for authentication
Log in/out
'Remember me'
Register
Forgot password
Change password
-----
Add 1 default admin with a seeder
Username: admin
Email: admin@ehb.be
Password: Password!321
-----
Theming/styles
Provide some default styling for your website. Even though design is not a core competence of this course, I expect a minimum. If you are not good at design, use something like Bootstrap and pick a free theme from a website such as https://startbootstrap.com/Links to an external site.
GIT
The use of git is required. Remember to commit often and to add logical commit messages. This allows me to follow along with your progress, but it also provides you with a fallback when something does go wrong with your code.

Important: add the 'vendor' folder to your .gitignore file.

Add a link to your GitHub repo for this project to your "about" page.

Submitting
Aside from the GitHub repo, you'll also have to submit a .zip of your project on Canvas. You name your file: bw_firstname_lastname_laravel.zip. In the zip you will delete the vendor folder.

Handing in too late will result in a 0. I only accept submissions through Canvas. Canvas not working because you try to submit your project at the very last minute is not an excuse for handing in too late.
#+end_src
* Backlog
** DONE Important: add the ~'vendor'~ folder to your ~.gitignore~ file.
#+begin_src org
Important: add the 'vendor' folder to your .gitignore file.
#+end_src
** TODO Change App Name and Title
** TODO Choose and Change Template Font
** [5/5] Database
*** [X] Create DB ~Backend_Web_Laravel~
Created MariaDB DB called "Backend_Web_Laravel".

#+begin_src sql
CREATE DATABASE Backend_Web_Laravel;
#+end_src

*** [X] Create User ~'laravel'~

#+begin_src sql
CREATE USER 'laravel';
#+end_src

*** [X] Grant Privileges for DB User and Password
See all users:
#+begin_src sql
SELECT User, Host FROM mysql.user;
#+end_src

To grant all privileges to a user on a specific database:
#+begin_src sql
GRANT ALL PRIVILEGES ON Backend_Web_Laravel.* TO 'laravel'@'localhost';
FLUSH PRIVILEGES;
#+end_src

Set the password for the DB:
#+begin_src sql
SET PASSWORD FOR 'laravel'@'localhost' = PASSWORD('*see .env');
#+end_src

*** [X] Fix .env for Laravel <-> Db Connection
*** [X] Do some Query Optimization (e.g. eager loading)
**** [X] Set Up Logging for Executed Queries (Event)
***** [X] Add channel to ~config/logging.php~: ~'query'~
***** [X] Listen for Query Event
***** [X] Log Info to query.log
** [1/2] About Page
#+begin_src org
It is not allowed to just copy/paste an online tutorial to finish this project, but you are allowed to use them as a basis for your own website if you:
- understand the code you are using and can explain what it does in your own words
- you correctly cite your sources
#+end_src

#+begin_src org
You will at least have an "about" page. This is a static view that will serve as your Readme/list of sources. Cite any resources that you've used in this page, as well as a link to those pages. This page is mandatory, if your about page does not exist, you will not be able to pass for this project.
#+end_src
*** [X] Frontend
**** [X] Create Page ~about~: ~resources/views/about.blade.php~
**** [2/2] Create Link Component
***** [X] Display DB Data (Categories and Links)
***** [X] Style Component
*** [4/4] Backend
To make code more DRY, I decided to go the extra mile and make DB tables and loop to display all sources.
**** [X] Create Tables
***** [X] Create About Links Table: ~about_links~
***** [X] Create About Links Category Table: ~about_categories~
**** [X] Create Models
***** [X] Create AboutLink Model: ~app/Models/AboutLink.php~
***** [X] Create AboutCategory Model:  ~app/Models/AboutCategory.php~
***** [X] Create FK Relation
**** [X] Create Seeders
***** [X] ~database/seeders/AboutCategorySeeder.php~
Creates the necessary categories with hardcoded ids for referencing.
***** [X] ~database/seeders/AboutLinkSeeder.php~
***** [X] Add seeders to main seeder class: database/seeders/DatabaseSeeder.php
**** [1/1] Create AboutController: ~app/Http/Controllers/AboutController.php~
***** [X] ~'index~ Method, renders about page.
**** [X] Create GET Route /about: ~routes/web.php~
*** [ ] Maintain Current About Page:
- Continually update the page and sources throughout the project's development.
- Log all utilized resources in the Seeders, ensuring they're reflected in the database and page.
** [1/4] Login and Auth
#+begin_src org
Login system
Users can log in
Visitors can create a new account

Users may or may not be an administrator
Only an administrator can promote another user to administrator status (or create a new user that is an admin)
#+end_src

*** DONE Install Laravel Breeze
#+begin_src shell
php artisan breeze:install
# Using blade + alpineJs and Pest.
#+end_src
*** [ ] Visitors can Register
*** [ ] Users can Log In
*** [ ] Users can be either ~admin~ or ~user~

** [0/5] Profile Page
#+begin_src org
Profile pagina
Each user has their own publicly available profile page
A user can edit their own user data
The information shown is at least
Username
Birthday
Avatar (that can be uploaded and saved on the webserver)
Short 'about me' biography
-----
Latest news
Admins can add, edit, and delete news items
Every visitor of the website can view the news posts
These news items have at least the following:
Title
Cover image
Content
Publishing date
#+end_src
*** [ ] Create Page/view
*** [0/6] Add Necessary Form(s) and Fields
**** [ ] Username
**** [ ] Birthday
**** [ ] Avatar
**** [ ] About Me
*** [ ] Create DB Migrations
*** [ ] Create Routes
*** [ ] Style Pages
** [1/6] Latest News

#+begin_src org
Latest news
Admins can add, edit, and delete news items
Every visitor of the website can view the news posts

These news items have at least the following:
Title
Cover image
Content
Publishing date
#+end_src

*** DONE [0/0] Backend Logic
Tables: news_item(s)
Fields: Title, Image(path), Content, Publishing_date
**** [X] Create Migrations
***** [X] ~news_items~ table
**** [X] Create Model: ~app/Models/NewsItem.php~
**** [X] Create Factory: ~database/factories/NewsItemFactory.php~
**** [X] Create Seeder: ~database/seeders/NewsItemSeeder.php~
**** [X] Add Seeder to ~DatabaseSeeder~
*** TODO [/] Frontend
**** [1/1] Create News View
***** [X] Create Page: ~resources/views/news.blade.php~
***** [2/5] Create New Item Component
****** [X] Make Blade Component File: ~resources/views/components/news-item.blade.php~
****** [X] Make View Component File: ~app/View/Components/NewsItem.php~
****** [3/4] Display Required Properties
******* [X] Displays Title
******* [ ] Has Cover Image
******* [X] Displays Content
******* [X] Shows Publishing Date
****** [ ] Completely Styled
**** [3/4] Create Detailed News View
***** [X] Create NewsController Method
***** [X] Create Route
***** [X] Create Page: ~resources/views/news/show.blade.php~
***** [?] Style Page
*** [ ] Admins can Add Items
**** [ ] Create Route
**** [ ] Create Method in NewsController
**** [0/3] Add Functionality to Pages
***** [ ] ~'index~
****** [ ] Make form
****** [ ] Style Button
***** [ ] ~'show'~
****** [ ] Make form
****** [ ] Style Button
*** [ ] Admins can Delete Items
*** [ ] Admins can add Edit Items
*** [ ] Visitors can
** [0/2] FAQ page
#+begin_src org
There is a list of questions and answers, grouped by categories
Admins can add, edit, and delete FAQ categories
Admins can add, edit, and delete FAQ question and answer pairs
Every visitor of the website can view the FAQ page(s)
#+end_src
*** [0/4] Backend Logic
**** [ ] Create Migrations
**** [ ] Create Model
**** [ ] Create Factory
**** [ ] Create Seeder
*** [ ] Frontend
**** [ ] Create page
**** [ ] Create Faq Components
** [ ] Contact Page
#+begin_src org
Contact page
Visitors can fill out a contact form
The content of submitted forms will be sent to the administrators
#+end_src
*** [ ] The Content of the Form is sent to Administrators
*** [ ] Visitors can Fill in Form
**** [ ] Backend
***** [0/4] Backend Logic
****** [ ] Create Migrations
****** [ ] Create Model
***** [ ] Frontend
****** [ ] Create Form Component
** WAIT EXTRA
